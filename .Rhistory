getwd()
summary(cars)
load("~/Programming/CoC/.RData")
image(base[375:445,450:500,1])
image(base[375:445,450:500,2])
image(base[375:445,450:500,3])
image(base[375:445,450:500,4])
image(base[375:445,450:500,1])
columns<-seq(10,90,40)
columns
matplot(1:100,t3red[,columns],type="l", col=colums/10,lty=1)
matplot(1:100,t3red[,columns],type="l", col=columns/10,lty=1)
+legend("topright", legend=columns,col=columns/10,lwd=1)
image(base[375:445,450:500,1])
matplot(1:100,t3red[,columns],type="l", col=colums/10,lty=1)
matplot(1:100,t3red[,columns],type="l", col=columns/10,lty=1)
?heatmat
?heatmap
heatmap(trred)
heatmap(t3red)
head(t3red)
heatmap(t3red)
?hclustfun
TowerFromBase<-base[375:445,450:500,1]
str(TowerFromBase)
View(`t4red`)
View(TowerFromBase)
summary(TowerFromBase)
a<-data.frame(c(1 2 3 4 5), c(6 7 8 9 10), c(11 12 13 14 15))
a<-data.frame(c(1, 2, 3, 4, 5), c(6, 7, 8, 9, 10), c(11, 12, 13, 14, 15))
a
a<-data.frame(A=c(1, 2, 3, 4, 5),B= c(6, 7, 8, 9, 10), C= c(11, 12, 13, 14, 15))
a
a[a<=5 || a>=10]<-NA
a
a<-data.frame(A=c(1, 2, 3, 4, 5),B= c(6, 7, 8, 9, 10), C= c(11, 12, 13, 14, 15))
b<-a
b[b<=5]<-NA
b
b<-a
b[b<=5 && b>=10]<-NA
b
a<-TowerFromBase
a[a<=0.6]<-NaN
a
?sd
sd(c(1,2,3, 4, 5,6 ))
b<-sd(c(1,2,3, 4, 5,6 ))
?var
?cov2corr
?cov2co
?cov2cor
b
b<-var(c(1,2,3, 4, 5,6 ))
b
b<-cov(c(1,2,3, 4, 5,6 ))
KeyPoints.Row
#Search of border points in the pattern picture
t3red<-tower3[,,1]
t3green<-tower3[,,2]
t3blue<-tower3[,,3]
t3red[t3red==0]<-NA
t3green[t3green==0]<-NA
t3blue[t3blue==0]<-NA
#Border Down
i=50
while (!is.na(t3red[i,50]) && i<100)
{BDred<-t3red[i,50]
BDgreen<-t3green[i,50]
BDblue<-t3blue[i,50]
BDindex<-i
i<-i+1
}
#Border Up
i=50
while (!is.na(t3red[i,50]) && i>1)
{BUred<-t3red[i,50]
BUgreen<-t3green[i,50]
BUblue<-t3blue[i,50]
BUindex<-i
i<-i-1
}
#Border Left
i=50
while (!is.na(t3red[50,i]) && i>1)
{BLred<-t3red[i,50]
BLgreen<-t3green[i,50]
BLblue<-t3blue[i,50]
BLindex<-i
i<-i-1
}
#Border Right
i=50
while (!is.na(t3red[50,i]) && i<100)
{BRred<-t3red[i,50]
BRgreen<-t3green[i,50]
BRblue<-t3blue[i,50]
BRindex<-i
i<-i+1
}
#fucking center
Cred=t3red[50,50]
Cgreen=t3green[50,50]
Cblue=t3blue[50,50]
KeyPoints= data.frame(Red=c(BUred,BRred,BDred,BLred,Cred),
Green=c(BUgreen,BRgreen,BDgreen,BLgreen,Cgreen),
Blue=c(BUblue,BRblue,BDblue,BLblue,Cblue),
Row=c(BUindex, 50,BDindex, 50, 50),
Column=c(50,BRindex,50, BLindex, 50),
PointDescription=c("BorderUp","BorderRight","BorderDown","BorderLeft", "Center"))
rm(BUred,BUgreen,BUblue,BRred,BRgreen,BRblue,BDred,BDgreen,BDblue,BLred,BLgreen,BLblue,BUindex,BRindex,BDindex,BLindex,Cred, Cgreen, Cblue)
KeyPoints.Row
View(KeyPoints)
KeyPoints$Row
KeyPoints$Row[1]
a<-0
for i=KeyPoints$Row[1]:KeyPoints[3]
{
a=a+1
}
for KeyPoints$Row[1]:KeyPoints[3]
{
a=a+1
}
for i=KeyPoints$Row[1]:KeyPoints$Row[3]
{
a=a+1
}
for (i in KeyPoints$Row[1]:KeyPoints[3])
{
a=a+1
}
a<-0
for (i in KeyPoints$Row[1]:KeyPoints$Row[3])
{
a=a+1
}
View(KeyPoints)
SDHR<-sd(tower3[KeyPoints$Row[1]:KeyPoints$Row[3],KeyPoints$Column[1]:KeyPoints$Column[3],1])
VARHR<-sd(tower3[KeyPoints$Row[1]:KeyPoints$Row[3],KeyPoints$Column[1]:KeyPoints$Column[3],1])
a<-tower3[KeyPoints$Row[1]:KeyPoints$Row[3],KeyPoints$Column[1]:KeyPoints$Column[3],1]
a
View(`t3red`)
#Standard deviation and Variance for Red matrix, Vertical line
SDVR<-sd(tower3[KeyPoints$Row[1]:KeyPoints$Row[3],KeyPoints$Column[1]:KeyPoints$Column[3],1])
VARVR<-var(tower3[KeyPoints$Row[1]:KeyPoints$Row[3],KeyPoints$Column[1]:KeyPoints$Column[3],1])
#Standard deviation and Variance for Green matrix, Vertical Line
SDVG<-sd(tower3[KeyPoints$Row[1]:KeyPoints$Row[3],KeyPoints$Column[1]:KeyPoints$Column[3],2])
VARVG<-var(tower3[KeyPoints$Row[1]:KeyPoints$Row[3],KeyPoints$Column[1]:KeyPoints$Column[3],2])
#Standard Deviation and VARiance for Blue matrix, Vertical Line
SDVB<-sd(tower3[KeyPoints$Row[1]:KeyPoints$Row[3],KeyPoints$Column[1]:KeyPoints$Column[3],3])
VARVB<-var(tower3[KeyPoints$Row[1]:KeyPoints$Row[3],KeyPoints$Column[1]:KeyPoints$Column[3],3])
#Standard deviation and Variance for Red matrix, Horizontal line
SDHR<-sd(tower3[KeyPoints$Row[4]:KeyPoints$Row[2],KeyPoints$Column[4]:KeyPoints$Column[2],1])
VARHR<-var(tower3[KeyPoints$Row[4]:KeyPoints$Row[2],KeyPoints$Column[4]:KeyPoints$Column[2],1])
#Standard deviation and Variance for Green matrix, Horizontal line
SDHG<-sd(tower3[KeyPoints$Row[4]:KeyPoints$Row[2],KeyPoints$Column[4]:KeyPoints$Column[2],2])
VARHG<-var(tower3[KeyPoints$Row[4]:KeyPoints$Row[2],KeyPoints$Column[4]:KeyPoints$Column[2],2])
#Standard deviation and Variance for Red matrix, Horizontal line
SDHB<-sd(tower3[KeyPoints$Row[4]:KeyPoints$Row[2],KeyPoints$Column[4]:KeyPoints$Column[2],3])
VARHB<-var(tower3[KeyPoints$Row[4]:KeyPoints$Row[2],KeyPoints$Column[4]:KeyPoints$Column[2],3])
Cross=data.frame(LineType=c("Horizontal", "Vertical"),
Red_SD=c(SDHR,SDVR),
Red_VAR=c(VARHR,VARVR),
Green_SD=c(SDHG,SDVG),
Green_VAR=c(VARHG,VARVG),
Blue_SD=c(SDHB,SDVB),
Blue_VAR=c(VARHB,VARVB))
rm(SDHR,SDVR,VARHR,VARVR, SDHG,SDVG,VARHG,VARVG,SDHB,SDVB,VARHB,VARVB)
View(Cross)
Dataraw<- read.csv("./activity.csv",sep=",",header=TRUE)
Data<-Dataraw[!is.na(Dataraw$steps),]
TotalStepsPerDay<-aggregate(Data$steps,by=list(Date=Data$date),sum)
hist(TotalStepsPerDay$x)
mean(TotalStepsPerDay$x)
median(TotalStepsPerDay$x)
'What is the average daily activity pattern?'
MeanStepsPerInterval<-aggregate(Data$steps,by=list(interval=Data$interval),mean)
plot(MeanStepsPerInterval$interval,MeanStepsPerInterval$x,type="l")
MeanStepsPerInterval[which.max(MeanStepsPerInterval$x),]
f <- function (x) {
if (is.na(x[1]))
{x[1]<-floor(MeanStepsPerInterval[which(MeanStepsPerInterval$interval==as.integer(x[3])),2])}
else
{x[1]<-x[1]}
x
}
'x[1]<-MeanStepsPerInterval[which(MeanStepsPerInterval$interval==x[3]),2]}'
r<-apply(Dataraw,1,f)
CompleteData<-as.data.frame(t(r))
CompleteData$steps<-as.integer(CompleteData$steps)
CompleteData$date<-as.Date(CompleteData$date)
StepsPerDayComplete<-aggregate(CompleteData$steps,by=list(Date=CompleteData$date),sum)
hist(StepsPerDayComplete$x)
mean(StepsPerDayComplete$x)
median(StepsPerDayComplete$x)
weekdayFunction<-function (x){
if (weekdays(as.Date(x[2]))=="sabado"  || weekdays(as.Date(x[2]))=="domingo")
{"weekend"}else {"weekday"}
}
r<-apply(CompleteData,1,weekdayFunction)
weekdayColumn<-data.frame(weekday=r)
r<-cbind(CompleteData,weekdayColumn)
a<- aggregate(steps=r$steps, by=list(interval=r$interval,weekday=r$weekday), mean)
a[,1]<-as.numeric(levels(a[,1]))
library(ggplot2)
q<-ggplot(interval,x , data=a)
q+facet_wrap(~weekday,nrow=2)+geom_line(linetype="solid",aes(group=weekday))
wd()
getwd()
setwd("/home/pedro/Programming/workspaceR/Reproducible Research")
Dataraw<- read.csv("./activity.csv",sep=",",header=TRUE)
mean(StepsPerDayComplete$x)
median(StepsPerDayComplete$x)
Data<-Dataraw[!is.na(Dataraw$steps),]
TotalStepsPerDay<-aggregate(Data$steps,by=list(Date=Data$date),sum)
MeanStepsPerInterval<-aggregate(Data$steps,by=list(interval=Data$interval),mean)
plot(MeanStepsPerInterval$interval,MeanStepsPerInterval$x,type="l")
MeanStepsPerInterval<-aggregate(Data$steps,by=list(interval=Data$interval),mean)
r<-apply(Dataraw,1,f)
CompleteData<-as.data.frame(t(r))
CompleteData$steps<-as.integer(CompleteData$steps)
CompleteData$date<-as.Date(CompleteData$date)
weekdayFunction<-function (x){
if (weekdays(as.Date(x[2]))=="sabado"  || weekdays(as.Date(x[2]))=="domingo")
{"weekend"}else {"weekday"}
}
r<-apply(CompleteData,1,weekdayFunction)
weekdayColumn<-data.frame(weekday=r)
r<-apply(CompleteData,1,weekdayFunction)
weekdayColumn<-data.frame(weekday=r)
r<-cbind(CompleteData,weekdayColumn)
a<- aggregate(steps=r$steps, by=list(interval=r$interval,weekday=r$weekday), mean)
a[,1]<-as.numeric(levels(a[,1]))
library(ggplot2)
q<-ggplot(interval,x , data=a)
q+facet_wrap(~weekday,nrow=2)+geom_line(linetype="solid",aes(group=weekday))
a<- aggregate(steps=r$steps, by=list(interval=r$interval,weekday=r$weekday), mean)
a<- aggregate(steps=r$steps, by=list(interval=r$interval,weekday=r$weekda), mean)
a<- aggregate(steps=r$steps, by=list(interval=r$interval,weekday=r$weekda),mean)
?aggregate
a<- aggregate(steps=r$steps, by=list(interval=r$interval,weekday=r$weekda),sum)
a<- aggregate(steps=r$steps, by=list(interval=r$interval,weekday=r$weekda), mena)
a<- aggregate(steps=r$steps, by=list(interval=r$interval,weekday=r$weekda), mean)
a<- aggregate(steps=r$steps, by=list(interval=r$interval,weekday=r$weekday), mean)
a<- aggregate(steps=r$steps, by=list(interval=r$interval), mean)
a<- aggregate(steps=r$steps, by=list(interval=r$interval), mean)
head(r)
a<- aggregate(steps=r$steps, by=list(interval=r$interval), mean)
a<- aggregate(steps=r$steps, by=list(interval=r$interval), mean())
a<- aggregate(steps=r$steps, by=list(interval=r$interval))
a<- aggregate(r$steps, by=list(interval=r$interval), mean)
a<- aggregate(steps=r$steps, by=list(interval=r$interval,weekday=r$weekday), mean)
a<- aggregate(r$steps, by=list(interval=r$interval,weekday=r$weekday), mean)
head(a)
a<- aggregate(r$steps, by=list(interval=r$interval,weekday=r$weekday), mean)
a[,1]<-as.numeric(levels(a[,1]))
library(ggplot2)
q<-ggplot(interval,x , data=a)
q+facet_wrap(~weekday,nrow=2)+geom_line(linetype="solid",aes(group=weekday))
head(a)
q<-ggplot(interval,x , data=a)
a[,1]<-as.numeric(levels(a[,1]))
q<-ggplot(interval,x , data=a)
q<-ggplot(a$interval,a$x , data=a)
q<-ggplot(a$interval,a$x )
q+facet_wrap(~weekday,nrow=2)+geom_line(linetype="solid",aes(group=weekday))
qplot(a$interval,a$x )
qplot(interval,x,data=a )
plot(interval,x,data=a )
plot(interval,x )
plot(a$interval,a$x )
str(a)
head(a)
a<- aggregate(r$steps, by=list(interval=r$interval,weekday=r$weekday), mean)
head(a)
str(a)
q<-ggplot(interval,x , data=a)
a[,1]<-as.numeric(levels(a[,1]))
q<-ggplot(interval,x , data=a)
str(a)
q<-ggplot(interval,x , data=a)
plot(a$interval,a$x )
q<-ggplot(interval,x , data=a)
q<-ggplot(interval,x , a)
q<-ggplot(a$interval,a$x)
q+facet_wrap(~weekday,nrow=2)+geom_line(linetype="solid",aes(group=weekday))
str(a)
ggplot(interval, x, data=a)
qplot(interval, x, data=a)
q<-qplot(interval, x, data=a)
q+facet_wrap(~weekday,nrow=2)+geom_line(linetype="solid",aes(group=weekday))
q<-gplot(data=a, aes(interval, x, color=weekday))+geom_point()
q<-ggplot(data=a, aes(interval, x, color=weekday))+geom_point()
g
q
q<-ggplot(data=a, aes(interval, x, color=weekday))+geom_point()+geom_line(linetype="solid")
q
q<-ggplot(data=a, aes(interval, x, color=weekday))+geom_line(linetype="solid")
q
q<-ggplot(data=a, aes(interval, x, color=weekday))+geom_point()
q
q<-ggplot(data=a, aes(interval, x, color=weekday))+geom_point()+geom_line(linetype="solid") +stat_smooth()
q
q<-ggplot(data=a, aes(interval, x, color=weekday))+geom_line(linetype="solid") +stat_smooth()
q
q<-ggplot(data=a, aes(interval, x, color=weekday))+ +stat_smooth()
q<-ggplot(data=a, aes(interval, x, color=weekday))+ stat_smooth()
q
q<-ggplot(data=a, aes(interval, x, color=weekday))+ geom_point() +stat_smooth()
q)
q<-ggplot(data=a, aes(interval, x, color=weekday))+ geom_point() +stat_smooth()
q
Data7wonders<- read.csv("./partidas151115.csv",sep=",",header=TRUE)
getwd()
setwd("/home/pedro/Programming/7wonders")
Data7wonders<- read.csv("./partidas151115.csv",sep=",",header=TRUE)
View(Data7wonders)
ggplot(Data7wonders, aes(guerra, total))+geom_point
ggplot(Data7wonders, aes(guerra, total))+geom_point()
?melt
df <- data.frame(time = 1:10,
a = cumsum(rnorm(10)),
b = cumsum(rnorm(10)),
c = cumsum(rnorm(10)))
head(df)
df <- melt(df ,  id.vars = 'time', variable.name = 'series')
?melt
df <- melt(df ,  id.vars = 'time', variable.name = 'series')
require(reshape)
library(reshape)
library("reshape")
df <- melt (df ,  id.vars = 'time', variable.name = 'series')
?melt
?matplot
matplot(Data7wonders[,2:8],Data7wonders[,9])
library(reshape2)
df <- melt (df ,  id.vars = 'time', variable.name = 'series')
head(df)
str(df)
df <- data.frame(time = 1:10,
a = cumsum(rnorm(10)),
b = cumsum(rnorm(10)),
c = cumsum(rnorm(10)))
df2 <- melt (df ,  id.vars = 'time', variable.name = 'series')
head(df)
head(df2)
Data7wondersGGPLOT <- melt(Data7wonders,id.vars="total",variable.name="categorias")
str(Data7wondersGGPLOT)
head(Data7wondersGGPLOT)
Data7wondersGGPLOT <- melt(Data7wonders[2:9],id.vars="total",variable.name="categorias")
head(Data7wondersGGPLOT)
str(Data7wondersGGPLOT)
ggplot(Data7wondersGGPLOT, aes(categorias, total))+geom_point(aes(colour=categorias))
str(Data7wondersGGPLOT)
ggplot(Data7wondersGGPLOT, aes(value, total))+geom_point(aes(colour=categorias))
ggplot(Data7wondersGGPLOT, aes(value, total))+geom_point(aes(colour=categorias))+stat_smooth()
ggplot(Data7wondersGGPLOT, aes(value, total, color= categorias))+geom_point()+stat_smooth()
ggplot(Data7wondersGGPLOT, aes(value, total, color= categorias))+geom_point()+facet_grid(categorias~.)+stat_smooth()
ggplot(Data7wondersGGPLOT, aes(value, total, color= categorias))+geom_point()+facet_grid(categorias~.)+stat_smooth()+scale_color_manual(values = c("red", "gold", "aquamarine", "blue", "darkgoldenrod1","darkviolet", "green"))
Data7wonders<- read.csv("./partidas151115.csv",sep=",",header=TRUE)
Data7wondersGGPLOT <- melt(Data7wonders[2:9],id.vars="total",variable.name="categorias")
library(ggplot2)
ggplot(Data7wondersGGPLOT, aes(value, total, color= categorias))+geom_point()+facet_grid(categorias~.)+stat_smooth()+scale_color_manual(values = c("red", "gold", "lightseagreen", "dodgeblue", "darkorange","magenta3", "green4"))
ggplot(Data7wondersGGPLOT, aes(value, total, color= categorias))+geom_point()+facet_grid(categorias~.)+scale_color_manual(values = c("red", "gold", "lightseagreen", "dodgeblue", "darkorange","magenta3", "green4"))
ggplot(Data7wondersGGPLOT, aes(value, total, color= categorias))+geom_point()+facet_grid(categorias~.)+scale_color_manual(values = c("red", "gold", "lightseagreen", "dodgerblue", "darkorange","magenta3", "green4"))
stat_smooth()
+stat_smooth()
q<-ggplot(Data7wondersGGPLOT, aes(value, total, color= categorias))+geom_point()+facet_grid(categorias~.)+scale_color_manual(values = c("red", "gold", "lightseagreen", "dodgerblue", "darkorange","magenta3", "green4"))
q
q+stat_smooth()
library(reshape2)
wd()
getwd()
currentwd()
currwd()
setwd("/home/pedro/Programming/workspaceR/Reproducible Research")
getwd()
Dataraw[names(Dataraw)==NA]
Dataraw<- read.csv("./activity.csv",sep=",",header=TRUE)
Data<-Dataraw[!is.na(Dataraw$steps),]
TotalStepsPerDay<-aggregate(Data$steps,by=list(Date=Data$date),su
m)
Dataraw<- read.csv("./activity.csv",sep=",",header=TRUE)
Data<-Dataraw[!is.na(Dataraw$steps),]
TotalStepsPerDay<-aggregate(Data$steps,by=list(Date=Data$date),sum)
Dataraw[names(Dataraw)==NA]
head(Dataraw)
Dataraw[names(steps)==NA]
sum(is.na(Dataraw$steps))
MeanStepsPerInterval[which.max(MeanStepsPerInterval$x),]
MeanStepsPerInterval<-aggregate(Data$steps,by=list(interval=Data$interval),mean)
MeanStepsPerInterval[which.max(MeanStepsPerInterval$x),]
a<-MeanStepsPerInterval[which.max(MeanStepsPerInterval$x),]
names(a)
row(a)
rows(Dataraw)
?rows
?row
row(Dataraw)
nrow(Dataraw)
f <- function (x) {
if (is.na(x[1]))
{x[1]<-floor(MeanStepsPerInterval[which(MeanStepsPerInterval$interval==as.integer(x[3])),2])}
else
{x[1]<-x[1]}
x
}
r<-apply(Dataraw,1,f)
CompleteData<-as.data.frame(t(r))
CompleteData$steps<-as.integer(CompleteData$steps)
CompleteData$date<-as.Date(CompleteData$date)
str(CompleteData)
str(Data)
as.Factor
?as.factor
StepsPerDayComplete<-aggregate(CompleteData$steps,by=list(Date=as.factor(CompleteData$date)),sum)
hist(StepsPerDayComplete$x)
head(StepsPerDayComplete)
head(CompleteData)
hist(StepsPerDayComplete$x,  include.lowest = FALSE)
hist(StepsPerDayComplete$x,  include.lowest = FALSE, right=FALSE)
head(CompleteData)
head(StepsPerDayComplete)
hist(StepsPerDayComplete$x,  right=FALSE)
hist(StepsPerDayComplete$x,  right=TRUE)
nrows(StepsPerDayComplete$x)
nrow(StepsPerDayComplete$x)
nrow(StepsPerDayComplete)
hist(StepsPerDayComplete$x)
hist(StepsPerDayComplete$x[2:,])
hist(StepsPerDayComplete$x[2:61,])
hist(StepsPerDayComplete$x[2:60,])
hist(StepsPerDayComplete[2:60,1])
StepsPerDayComplete
?knit2html()
getwd()
?unzip
unzip("./activity.zip","./activity.csv")
getwd()
setwd("/home/pedro/Programming/workspaceR/Remote PA1")
unzip("./activity.zip","./activity.csv")
unz("./activity.zip","./activity.csv")
?unz
?unzip
unz("./activity.zip")
unzip("./activity.zip","./activity.csv")
getwd()
con<-unzip("./activity.zip","./activity.csv")
?tempfile()
temp <- tempfile()
temp <- tempfile("./activity.zip")
con<- unzip(temp,"./activity.csv")
con<- unz(temp,"./activity.csv")
temp <- tempfile("./activity.zip")
Dataraw<- read.csv(unz(temp,"./activity.csv"),sep=",",header=TRUE)
